// Copyright (C) 2018-2020 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

DOCKER_CONTAINER_NAME= "openvino-onnx-ci-container"
DOCKER_IMAGE_TAG = "openvino-onnx-ci-image"

BACKEND_CONFIGURATIONS = [
    [ name: "Release", build_type: "Release", protobuf_lite : "OFF" ],
    [ name: "Debug", build_type: "Debug", protobuf_lite : "OFF" ],
    [ name: "Rel+Lite", build_type: "Release", protobuf_lite : "ON" ],
]

// workaround for aborting previous builds on PR update
@NonCPS
 def stopPreviousRunningBuilds() {
     def jobname = env.JOB_NAME
     if (jobname.startsWith("onnx-ci/openvino onnx ci/openvino/PR")){
         def buildnum = env.BUILD_NUMBER.toInteger()
         def job = Jenkins.instance.getItemByFullName(jobname)
         def job_newest = job.builds.first()
         for (build in job.builds.reverse()[0..<-1]) {
             if (build.isBuilding()){
                 echo "Stop task = ${build} because newest #${job_newest} is on the way"
                 build.doStop();
                 continue;
             }
         }
     }

 }

def getGitPrInfo(String project) {
    def gitPrInfo = [
        prAuthorEmail : "",
        commitAuthorEmail : "",
        commitHash : "",
        commitSubject : ""
    ]
    try {
        dir ("${WORKDIR}/${project}") {
            gitPrInfo.prAuthorEmail = sh (script: 'git log -1 --pretty="format:%ae" ', returnStdout: true).trim()
            gitPrInfo.commitAuthorEmail = sh (script: 'git log -1 --pretty="format:%ce" ', returnStdout: true).trim()
            gitPrInfo.commitSubject = sh (script: 'git log -1 --pretty="format:%H" ', returnStdout: true).trim()
            gitPrInfo.commitHash = sh (script: 'git log -1 --pretty="format:%s" ', returnStdout: true).trim()
        }
    }
    catch(e) {
        echo "Failed to retrieve ${project} git repository information!"
        echo "ERROR: ${e}"
    }
    return gitPrInfo
}

def notifyByEmail(def gitPrInfo) {
    stage('Notify') {
        String notifyPeople = "${gitPrInfo.prAuthorEmail}, ${gitPrInfo.commitAuthorEmail}"
        emailext (
            subject: "OpenVino CI: PR ${CHANGE_ID} ${currentBuild.result}!",
            body: """
                    Status: ${currentBuild.result}
                    Pull Request Title: ${CHANGE_TITLE}
                    Pull Request: ${CHANGE_URL}
                    Branch: ${CHANGE_BRANCH}
                    Commit Hash: ${gitPrInfo.commitSubject}
                    Commit Subject: ${gitPrInfo.commitHash}
                    Jenkins Build: ${RUN_DISPLAY_URL}
            """,
            to: "${notifyPeople}"
        )
    }
}

def gitSubmoduleUpdate(String repository_name) {
    dir ("${WORKDIR}/${repository_name}") {
        sh  label: "Init ${repository_name} submodules",
            script:
        """
            git submodule init && git submodule update \
                --init \
                --no-fetch \
                --recursive 
        """
    }
}

def prepare_repository() {
    dir("${WORKDIR}") {
        checkout scm
        gitSubmoduleUpdate(PROJECT_NAME)
    }
}

def updateModels() {
    sh """
        ./ngraph/python/tests/test_onnx/model_zoo_preprocess.sh -d ${HOME}/ONNX_CI/data -o
    """
}

def buildDockerImage(Map configuration) {
    updateModels()
    sh """
        docker build --tag=${DOCKER_IMAGE_TAG} \
        --build-arg BUILD_TYPE=${configuration.build_type} \
        --build-arg PROTOBUF_LITE=${configuration.protobuf_lite} \
        --file=.ci/openvino-onnx/Dockerfile \
        --build-arg http_proxy=http://proxy-chain.intel.com:911/ \
        --build-arg https_proxy=http://proxy-chain.intel.com:912/ .
    """
}

def runTests(Map configuration) {
    // Run only basic unit tests in Debug configuration
    if (configuration.build_type == "Debug") {
        sh """
            docker run --name ${DOCKER_CONTAINER_NAME} ${DOCKER_IMAGE_TAG}
        """
    }

    // Run unit-tests AND large model tests by default
    else {
        sh """
            docker run --name ${DOCKER_CONTAINER_NAME} \
            --volume ${HOME}/ONNX_CI/data/model_zoo:/root/.onnx/model_zoo \
            ${DOCKER_IMAGE_TAG} /bin/bash -c "tox && tox -e zoo_models"
        """
    }
}

def getConfigurationsMap() {
    def configurationsMap = [:]
    for (backend in BACKEND_CONFIGURATIONS) {
        def configuration = backend.clone()
        configuration.name = "${configuration.name}"
        configurationsMap[configuration.name] = {
            stage(configuration.name) { CONFIGURATION_WORKFLOW(configuration) }
        }
    }
    return configurationsMap
}

CONFIGURATION_WORKFLOW = { configuration ->
    node("OpenVino") {
        try {
            PROJECT_NAME = "openvino"
            WORKDIR = "${HOME}/workspace/${BUILD_NUMBER}"

            stage("Clone repository") {
                stopPreviousRunningBuilds()
                try {
                    prepare_repository()
                }
                catch(e){
                    sleep(time: 30, unit: "SECONDS")
                    prepare_repository()
                }
            }
            stage("Prepare Docker environment") {
              dir("${WORKDIR}") {
                    buildDockerImage(configuration)
                }
            }
            stage("Run tests") {
                timeout(time: 20, unit: 'MINUTES') {
                    runTests(configuration)
                }
            }
        }
        catch(e) {
                // Set result to ABORTED if exception contains exit code of a process interrupted by SIGTERM
                if ("$e".contains("143")) {
                    currentBuild.result = "ABORTED"
                } else {
                    currentBuild.result = "FAILURE"
                }
                gitPrInfo = getGitPrInfo(PROJECT_NAME)
                notifyByEmail(gitPrInfo)
        }
        finally {
            stage("Cleanup") {
                deleteDir()
                sh """
                    docker rm -f ${DOCKER_CONTAINER_NAME}
                    docker image prune -f
                """
            }
        }
    }
}

pipeline {
    agent none
    options {
        skipDefaultCheckout true
        timeout(activity: true, time: 60, unit: 'MINUTES')
    }
    stages {
        stage('Parallel CI') {
            steps {
                script {
                    parallelStagesMap = getConfigurationsMap()
                    parallel parallelStagesMap
                }
            }

        }
    }
}
